{"version":3,"sources":["MoviesList.js","MoviesDetails.js","App.js","serviceWorker.js","index.js"],"names":["MovieList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSearch","e","data","target","value","setState","axios","get","concat","then","response","search","Search","console","log","movies","catch","err","state","react_default","a","createElement","className","Container","style","textAlign","fontSize","Form","Control","size","type","name","onChange","placeholder","undefined","map","ele","i","Card","Title","key","react_router_dom","to","imdbID","React","Component","MovieShow","show","_this2","id","props","match","params","Body","Header","Row","Col","md","src","Poster","alt","width","height","Alert","varient","Released","Runtime","Awards","Country","Language","Actors","Writer","Genre","Link","href","App","react_router","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49999626.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from 'axios'\r\nimport {Link} from 'react-router-dom'\r\nimport { Container ,Card, Form} from 'react-bootstrap'\r\nclass MovieList extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            movies:[],\r\n            data:'',\r\n        }\r\n    }\r\n    handleSearch=(e)=>{\r\n        const data=e.target.value\r\n        this.setState({data})\r\n        axios.get(`https://www.omdbapi.com/?apikey=caac10e0&s=${data}&type=movie`)\r\n        .then(response=>{\r\n            const search=response.data.Search\r\n            console.log('movies list',search)\r\n            this.setState({movies:search})\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n        this.setState({\r\n            search:e.target.value\r\n        })\r\n    }\r\n    render(){\r\n        console.log('state',this.state.movies)\r\n        return(\r\n            <div className='fluid-container'>\r\n                <Container>\r\n                    <h1 className='pt-5 pb-2' style={{textAlign:\"center\",fontSize:'34px'}}>Search Your Movie Name </h1>\r\n                    <Form.Control size='lg'\r\n                        type='search' \r\n                        name='data'   \r\n                        onChange={this.handleSearch} \r\n                        placeholder='search movie by title'\r\n                    />\r\n                    {\r\n                        this.state.movies!=undefined?(\r\n                            <div>\r\n                                    {\r\n                                        this.state.movies.map((ele,i)=>{\r\n                                            return (<Card.Title key={i}><Link to={`/movies/${ele.imdbID}`}>{ele.Title}</Link></Card.Title>)\r\n                                        })\r\n                                    }\r\n                            </div>):('')\r\n                    }\r\n                </Container>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MovieList","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Card,Container,Row,Col, Alert} from 'react-bootstrap'\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass MovieShow extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            show:{}\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        const id=this.props.match.params.id\r\n        axios.get(`https://www.omdbapi.com/?i=${id}&apikey=caac10e0`)\r\n        .then(response=>{\r\n            const show=response.data\r\n            console.log('movie show',show)\r\n            this.setState({show})\r\n        })\r\n    }\r\n    render(){\r\n        // console.log('show',this.state.show.title)\r\n        return(\r\n            <div className='fluid-container'>\r\n                <h1 className='pt-5 pb-2' style={{textAlign:\"center\"}}>Movie Details </h1>\r\n                <Container>\r\n                        <Card.Body className='border rounded-lg pl-5 mt-5'>\r\n                            <Card.Header className='border-0 ml-3 mb-3'>\r\n                                <b>Movie Name:--- {this.state.show.Title}</b>\r\n                            </Card.Header>\r\n                                <Row>\r\n                                    <Col md={6}><img src={this.state.show.Poster} alt='pic of candidate' className='img-rersponsive ml-3' style={{width:'auto',height:'auto'}}></img></Col>\r\n                                    <Col md={6}>\r\n                                        <Alert varient='success'>\r\n                                        <p className='ml-3'>\r\n                                            <b> Released - </b>{this.state.show.Released} ({this.state.show.Runtime})<br/>\r\n                                            <b>Awards - </b>{this.state.show.Awards}<br/>\r\n                                            <b> Country - </b>{this.state.show.Country}<br/>\r\n                                            <b> Language -</b> {this.state.show.Language}<br/>\r\n                                            <b>Actors - </b>{this.state.show.Actors}<br/>\r\n                                            <b> Writer -</b>{this.state.show.Writer}<br/>\r\n                                            <b>Genre -</b> {this.state.show.Genre}<br/>\r\n                                            \r\n                                        </p>\r\n                                        </Alert>\r\n                                        \r\n                                    </Col>\r\n                                </Row><br/>\r\n                            <Card.Link href=\"/\">back</Card.Link>\r\n                        </Card.Body>\r\n                </Container>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default MovieShow","import React from 'react'\nimport {BrowserRouter,Route,Switch} from 'react-router-dom'\nimport MovieList from './MoviesList'\nimport MovieShow from './MoviesDetails'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css'\nfunction App(props)\n{\n    return(\n        <BrowserRouter>\n            <div>\n                <Switch>\n                    <Route path='/' component={MovieList} exact={true}/>\n                    <Route path='/movies/:id' component={MovieShow}/>\n                </Switch>\n            </div>\n        </BrowserRouter>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}